{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAUC,SAASC,cAAc,SACjCC,EAAgBH,EAAQE,cAAc,uBACtCE,EAAUJ,EAAQE,cAAc,sBAChCG,EAAYL,EAAQE,cAAc,wBAgDxC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCC,YAAW,IAAMJ,EAAQ,C,SAAEH,E,MAAUC,KAAUA,GAE/CM,YAAW,IAAMH,EAAO,C,SAAEJ,E,MAAUC,KAAUA,EAAM,G,CA5B1DR,EAAQe,iBAAiB,UAAUC,IACjCA,EAAEC,iBACF,MAAMC,EAAaf,EAAcgB,MAC3BC,EAAOhB,EAAQe,MACfE,EAAShB,EAAUc,MAEzB,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/BhB,EAAcgB,GADCJ,EAAaI,GAAKF,GAE9BG,MAAKC,GACJC,EAAA3B,GAAS4B,OAAOC,QACd,oBAAoBH,EAAOjB,SAAW,QAAQiB,EAAOhB,cAGxDoB,OAAMC,GACLJ,EAAA3B,GAAS4B,OAAOI,QACd,kBAAkBD,EAAEtB,SAAW,QAAQsB,EAAErB,a","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\nconst firstDelayRef = formRef.querySelector('input[name=\"delay\"]');\nconst stepRef = formRef.querySelector('input[name=\"step\"]');\nconst amountRef = formRef.querySelector('input[name=\"amount\"]');\n\n// formRef.addEventListener('submit', async e => {\n//   e.preventDefault();\n//   const firstDelay = firstDelayRef.value;\n//   const step = stepRef.value;\n//   const amount = amountRef.value;\n\n//   for (let i = 0; i < amount; i++) {\n//     try {\n//       const result = await createPromise(i, i === 0 ? firstDelay : step);\n//       Notiflix.Notify.success(\n//         `Fulfiled promise ${result.position + 1} in ${\n//           +firstDelay + result.position * +step\n//         } ms`\n//       );\n//     } catch (e) {\n//       Notiflix.Notify.failure(\n//         `Reject promise ${e.position + 1} in ${\n//           +firstDelay + e.position * +step\n//         } ms`\n//       );\n//     }\n//   }\n// });\n\nformRef.addEventListener('submit', e => {\n  e.preventDefault();\n  const firstDelay = firstDelayRef.value;\n  const step = stepRef.value;\n  const amount = amountRef.value;\n\n  for (let i = 0; i < amount; i++) {\n    const delay = +firstDelay + i * +step;\n    createPromise(i, delay)\n      .then(result =>\n        Notiflix.Notify.success(\n          `Fulfiled promise ${result.position + 1} in ${result.delay} ms`\n        )\n      )\n      .catch(e =>\n        Notiflix.Notify.failure(\n          `Reject promise ${e.position + 1} in ${e.delay} ms`\n        )\n      );\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$firstDelayRef","$47d4ff9957288465$var$stepRef","$47d4ff9957288465$var$amountRef","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","Math","random","setTimeout","addEventListener","e1","preventDefault","firstDelay","value","step","amount","i","then","result","$parcel$interopDefault","Notify","success","catch","e","failure"],"version":3,"file":"03-promises.02d6a6d7.js.map"}